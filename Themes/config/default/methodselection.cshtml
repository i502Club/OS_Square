@inherits NBrightBuy.render.NBrightBuyRazorTokens<NBrightDNN.NBrightRazor>
@using System.Linq
@using DotNetNuke.Common
@using DotNetNuke.Entities.Portals
@using DotNetNuke.Entities.Users
@using NBrightDNN
@using Nevoweb.DNN.NBrightBuy.Components

@AddMetaData("resourcepath", "/DesktopModules/i502Club/OS_Square/App_LocalResources")
@AddMetaData("resourcepath", "/DesktopModules/NBright/NBrightBuy/App_LocalResources/")

@{
    var info = (NBrightInfo)Model.List.First();
}

@{
    var sandboxmode = info.GetXmlPropertyBool("genxml/checkbox/sandboxmode");
    var showAch = info.GetXmlPropertyBool("genxml/checkbox/showach");
}
@if (sandboxmode)
{
    <script type="text/javascript" src="https://sandbox.web.squarecdn.com/v1/square.js"></script>
}
else
{
    <script type="text/javascript" src="https://web.squarecdn.com/v1/square.js"></script>
}

<script type="text/javascript" src="/DesktopModules/i502Club/OS_Square/themes/config/js/jquery.cookie.min.js"></script>
<link rel="stylesheet" href="/DesktopModules/i502Club/OS_Square/themes/config/css/ossquare.css">

<div>
    <script type="text/javascript">
        const appId = '@info.GetXmlProperty("genxml/textbox/applicationid", true)';
        const locationId = '@info.GetXmlProperty("genxml/textbox/locationname")';
        var achButton;
        $(function () {
            achButton = document.getElementById('ach-button');
        });

        async function initializeCard(payments) {
            const card = await payments.card();
            await card.attach('#card-container');
            return card;
        }

        @if (showAch) {<text>
        async function initializeACH(payments) {
            const ach = await payments.ach();
            // Note: ACH does not have an .attach(...) method
            // the ACH auth flow is triggered by .tokenize(...)
            return ach;
        }
        </text>}

        document.addEventListener('DOMContentLoaded', async function () {
            if (!window.Square) {
                throw new Error('Square.js failed to load properly');
            }
            const payments = window.Square.payments(appId, locationId);
            let card;
            try {
                card = await initializeCard(payments);
            } catch (e) {
                console.error('Initializing Card failed', e);
                return;
            }

            @if (showAch) {<text>
            let ach;
            try {
                ach = await initializeACH(payments);
            } catch (e) {
                console.error('Initializing ACH failed', e);
                return;
            }
            </text>}

            // create card payment
            async function handlePaymentMethodSubmission(event, paymentMethod, options) {
                event.preventDefault();

                //display OS loading spinner
                $(".processingcheckout").show();

                try {
                    // disable the submit button as we await tokenization and make a
                    // payment request.
                    cardButton.disabled = true;
                    if (achButton) { achButton.disabled = true; }
                    const token = await tokenize(paymentMethod, options);

                    if (token) {
                        // Setting a short lived cookie to pass the nonce token. It gets removed when the
                        // Square payment finishes and the user gets redirected.
                        var homeUrl = location.origin;
                        Cookies.set('nonce', token, { expires: 1 / 24, path: '/', domain: homeUrl.replace(location.protocol, "").replace("//", "").replace("/", "") });

                        // Go to provider which creates the payment request
                        location.href = "?provider=@info.GetXmlProperty("genxml/hidden/ctrl")";
                    }
                    else {
                        // If no token returned re-enable buttons
                        if (achButton) { achButton.disabled = false; }
                        cardButton.disabled = false;
                    }

                } catch (e) {
                    cardButton.disabled = false;
                    if (achButton) { achButton.disabled = false; }
                    console.error(e.message);
                }
            }

            const cardButton = document.getElementById(
                'card-button'
            );

            cardButton.addEventListener('click', async function (event) {
                await handlePaymentMethodSubmission(event, card);
            });

            @if (showAch) {<text>
            achButton.addEventListener('click', async function (event) {

                event.preventDefault();

                const paymentForm = document.getElementById('Form');

                // only allow ach name inputs with numbers, letters,
                // periods, hyphens, apostrophes & spaces
                const regex = /^[a-zA-Z.\-\'\s.+]+$/;
                let msg = "@ResourceKey("Payment.AchValidationMessage")";

                // validate ach name inputs
                let $givenName = $('input[name=givenName]');
                let givenName = $givenName.val().trim();
                if (givenName == "") {
                    $givenName.select();
                    return false;
                }
                else {
                    if (!regex.test(givenName)) {
                        $("#givenName-error").show().text(msg);
                        $givenName.select();
                        return false;
                    }
                }

                let $familyName = $('input[name=familyName]');
                let familyName = $familyName.val().trim();
                if (familyName == "") {
                    $familyName.select();
                    return false;
                }
                else {
                    if (!regex.test(familyName)) {
                        $("#familyName-error").show().text(msg);
                        $familyName.select();
                        return false;
                    }
                }

                const achOptions = getACHOptions(paymentForm);
                await handlePaymentMethodSubmission(event, ach, achOptions);

            });
            </text>}

            // If there is a cookie value for a nonce we'll erase it. Arriving on this page
            // with a cookie means the transaction has been handled by RedirectForPayment
            // so we clear it.
            if ($.Cookie != null && $.Cookie("nonce") != "") {
                $.Cookie("nonce", "");
            }

        });

        // This function tokenizes a payment method.
        // The ‘error’ thrown from this async function denotes a failed tokenization,
        // which is due to buyer error (such as an expired card). It is up to the
        // developer to handle the error and provide the buyer the chance to fix
        // their mistakes.
        async function tokenize(paymentMethod, options = {}) {
            const tokenResult = await paymentMethod.tokenize(options);

            if (tokenResult.status === 'OK') {
                return tokenResult.token;
            } else {
                $(".processingcheckout").hide();

                let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
                if (tokenResult.errors) {
                    errorMessage += ` and errors: ${JSON.stringify(
                        tokenResult.errors
                    )}`;
                }

                throw new Error(errorMessage);
            }
        }

        @if (showAch) {<text>
        function getBillingContact(form) {
            const formData = new FormData(form);

            return {
                givenName: formData.get('givenName'),
                familyName: formData.get('familyName'),
            };
        }

        function getACHOptions(form) {
            const billingContact = getBillingContact(form);
            const accountHolderName = `${billingContact.givenName} ${billingContact.familyName}`;

            return { accountHolderName };
        }
        </text>}
    </script>

    <div id="sq-container">
        <div class="loading hidden">Loading&#8230;</div>
        <form id="payment-form">
            @if (showAch)
            {
                <h3>@ResourceKey("Payment.SquareAchFormTitle")</h3>
                <fieldset class="buyer-inputs">
                    <input type="text"
                           autocomplete="given-name"
                           aria-required="true"
                           aria-label="First Name"
                           required="required"
                           placeholder="Given Name"
                           name="givenName"
                           spellcheck="false"
                           class="@info.GetXmlProperty("genxml/textbox/achcssclass")" />
                    <label id="givenName-error" class="error" for="givenName" style="display: none;"></label>
                    <input type="text"
                           autocomplete="family-name"
                           aria-required="true"
                           aria-label="Last Name"
                           required="required"
                           placeholder="Family Name"
                           name="familyName"
                           spellcheck="false"
                           class="@info.GetXmlProperty("genxml/textbox/achcssclass")" />
                    <label id="familyName-error" class="error" for="familyName" style="display: none;"></label>
                </fieldset>
                <button id="ach-button" class="paybutton primarybutton">@info.GetXmlProperty("genxml/lang/genxml/textbox/buttontext")</button>
            }
            <h3>@ResourceKey("Payment.SquarePaymentFormTitle")</h3>
            <div id="card-container"></div>
            <img src="/DesktopModules/i502Club/OS_Square/Themes/config/img/square-pay.png" />
            <div class="defaultmessage">@info.GetXmlProperty("genxml/lang/genxml/textbox/message")</div>
            <button id="card-button" class="paybutton primarybutton" type="button">@info.GetXmlProperty("genxml/lang/genxml/textbox/buttontext")</button>
        </form>
    </div>
    <hr />
</div>
