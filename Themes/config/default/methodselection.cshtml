@inherits NBrightBuy.render.NBrightBuyRazorTokens<NBrightDNN.NBrightRazor>
@using System.Linq
@using DotNetNuke.Common
@using DotNetNuke.Entities.Portals
@using DotNetNuke.Entities.Users
@using NBrightDNN
@using Nevoweb.DNN.NBrightBuy.Components

@AddMetaData("resourcepath", "/DesktopModules/i502Club/OS_Square/App_LocalResources")
@AddMetaData("resourcepath", "/DesktopModules/NBright/NBrightBuy/App_LocalResources/")

@{
    var info = (NBrightInfo)Model.List.First();
}

@{ 
    var sandboxmode = info.GetXmlPropertyBool("genxml/checkbox/sandboxmode");
}
@if(sandboxmode){
<script type="text/javascript" src="https://sandbox.web.squarecdn.com/v1/square.js"></script>
}
else {
 <script type="text/javascript" src="https://web.squarecdn.com/v1/square.js"></script>   
}

<script type="text/javascript" src="/DesktopModules/i502Club/OS_Square/themes/config/js/jquery.cookie.min.js"></script>
<link rel="stylesheet" href="/DesktopModules/i502Club/OS_Square/themes/config/css/ossquare.css">

<div>
    <script type="text/javascript">
        const appId = '@info.GetXmlProperty("genxml/textbox/applicationid", true)';
        const locationId = '@info.GetXmlProperty("genxml/textbox/locationname")';

        async function initializeCard(payments) {
            const card = await payments.card();
            await card.attach('#card-container');
            return card;
        }

        document.addEventListener('DOMContentLoaded', async function () {
            if (!window.Square) {
                throw new Error('Square.js failed to load properly');
            }
            const payments = window.Square.payments(appId, locationId);
            let card;
            try {
                card = await initializeCard(payments);
            } catch (e) {
                console.error('Initializing Card failed', e);
                return;
            }

            // create card payment
            async function handlePaymentMethodSubmission(event, paymentMethod) {
                event.preventDefault();

                try {
                    // disable the submit button as we await tokenization and make a
                    // payment request.
                    cardButton.disabled = true;
                    const token = await tokenize(paymentMethod);

                    // Setting a short lived cookie to pass the nonce token. It gets removed when the
                    // Square payment finishes and the user gets redirected.
                    var homeUrl = location.origin;
                    Cookies.set('nonce', token, { expires: 1/24, path: '/', domain: homeUrl.replace(location.protocol, "").replace("//", "").replace("/", "") });

                    // Go to provider which creates the payment request 
                    location.href = "?provider=@info.GetXmlProperty("genxml/hidden/ctrl")";

                } catch (e) {
                    cardButton.disabled = false;
                    displayPaymentResults('FAILURE');
                    console.error(e.message);
                }
            }

            const cardButton = document.getElementById(
                'card-button'
            );
            cardButton.addEventListener('click', async function (event) {
                await handlePaymentMethodSubmission(event, card);
            });

            // If there is a cookie value for a nonce we'll erase it. Arriving on this page
            // with a cookie means the transaction has been handled by RedirectForPayment 
            // so we clear it.
            if ($.Cookie != null && $.Cookie("nonce") != "") {
                $.Cookie("nonce", "");
            }

        });

        // This function tokenizes a payment method.
        // The ‘error’ thrown from this async function denotes a failed tokenization,
        // which is due to buyer error (such as an expired card). It is up to the
        // developer to handle the error and provide the buyer the chance to fix
        // their mistakes.
        async function tokenize(paymentMethod) {
            const tokenResult = await paymentMethod.tokenize();
            if (tokenResult.status === 'OK') {
                return tokenResult.token;
            } else {
                let errorMessage = `Tokenization failed-status: ${tokenResult.status}`;
                if (tokenResult.errors) {
                    errorMessage += ` and errors: ${JSON.stringify(
                        tokenResult.errors
                    )}`;
                }
                throw new Error(errorMessage);
            }
        }

    </script>

    <div id="sq-container">
        <div class="loading hidden">Loading&#8230;</div>
        <h3>@ResourceKey("Payment.SquarePaymentFormTitle")</h3>

        <form id="payment-form">
            <div id="card-container"></div>
            <img src="/DesktopModules/i502Club/OS_Square/Themes/config/img/square-pay.png" />
            <div class="defaultmessage">@info.GetXmlProperty("genxml/lang/genxml/textbox/message")</div>
            <button id="card-button" class="paybutton primarybutton" type="button">@info.GetXmlProperty("genxml/lang/genxml/textbox/buttontext")</button>
        </form>
        <div id="payment-status-container"></div>
    </div>
    <hr />
</div>
